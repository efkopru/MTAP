rm(list=ls())
library(knitr)
library(dplyr)
library(ggplot2)
library(ompr)
library(sf)
library(sp)
library(spdep)
library(magrittr)
library(ROI.plugin.glpk)
library(ROI.plugin.symphony)
library(ompr.roi)
library(tidyverse)
set.seed(12345)
# Plot integer axis.
integer_breaks <- function(x){
seq(floor(min(x)), ceiling(max(x)))}
# neightype : { rook, queen, hexagon }
# n : the size of surface, for queen and rook; the size of one edge, for hexagon: number of rings
# upperLimit: the upper limit for sample impedance creator, from 1 to upper limit  e.g. 1:20
solveMTAPInstance <- function(n, neigType, upperLimit){
# starting from 0 or 1 ?
numOfTargetPts <- nrow(targetPoints)
numOfStartPts <- nrow(startPoint)
if(tolower(neigType)=='hexagon'){
########################### Hexagonal ##############################
hexaCellCount <- function(i){1+sum(0:i*6)}  # number of cells by hexagonal ring
nOfRings <- n
hexaCellCount(nOfRings)
## Build hexagonal polygon frame
tri <- cos(pi/6) # sqrt(1-0.5^2)
bndHexa <- rbind(c(-1,0),c(-0.5,tri),c(0.5,tri),c(1,0),
c(0.5,-tri),c(-0.5,-tri),c(-1,0))
stBnd <- st_polygon(list(bndHexa))
stBnd <- st_sfc(stBnd, crs=2960)
## Export frame to "sp" object
spBnd <- as(stBnd, Class = "Spatial")
proj4string(spBnd)
## Generate hexagonal tiles within frame
hexa <- spsample(spBnd,  type="hexagonal", cellsize=1/(nOfRings+1))
hexa <- HexPoints2SpatialPolygons(hexa)
df <- coordinates(hexa)
df <- data.frame(idx=1:nrow(df),x=round(df[,1], 12),y=round(df[,2],12))
hexaShp <- SpatialPolygonsDataFrame(hexa, df)
nb <- spdep::poly2nb(hexaShp, queen=F)       # extract first order neighbors links
allPoints <<- data.frame(idx = 1:nrow(hexaShp@data), x = hexaShp@data$x, y = hexaShp@data$y, grp="Intermediate")
# Set Start and Target points
startPoint <- data.frame(x = allPoints[12,2], y = allPoints[12,3])
targetPoints <- data.frame(x = allPoints[22,2], y = allPoints[22,3])
targetPoints <- rbind(targetPoints, c(x = allPoints[31,2], y = allPoints[31,3] ))
targetPoints <- rbind(targetPoints, c(x = allPoints[41,2], y = allPoints[41,3] ))
# Group Start, Target and Int nodes for plotting
for(i in 1:numOfStartPts){
allPoints[which(allPoints$x == startPoint$x[i] & allPoints$y == startPoint$y[i]), "grp"] <<- "Start"
}
for(i in 1:numOfTargetPts){
allPoints[which(allPoints$x == targetPoints$x[i] & allPoints$y == targetPoints$y[i]), "grp"] <<- "Target"
}
# Number of Start and Target points
numOfTargetPts <- nrow(targetPoints)
numOfStartPts <- nrow(startPoint)
hexagonalNeighbors <- function(){
hexaDF <- data.frame()
for(i in 1:length(nb)){
a <- nb[[i]]
for(j in 1:length(a)){
hexaDF <- rbind(hexaDF, list(i, a[j], hexaShp@data[i, 2], hexaShp@data[i, 3], hexaShp@data[a[j], 2], hexaShp@data[a[j], 3]))
}
}
names(hexaDF)[1] <- "F"
names(hexaDF)[2] <- "T"
names(hexaDF)[3] <- "x"
names(hexaDF)[4] <- "y"
names(hexaDF)[5] <- "nX"
names(hexaDF)[6] <- "nY"
return(hexaDF)
}
########################### Hexagonal ##############################
hexaDF <- hexagonalNeighbors()
impedances <<- hexaDF
# Total number of variables
totNV <<- nrow(impedances)
index <<- 1:totNV
neigType <- 'hexagon'
# Create random impedance between 1-20
impValues <<- sample(1:upperLimit, totNV, replace = T)
impedances <<- cbind(index, impedances, impValues, impValues)
flowVars <<- cbind(index,"flow", "f", neigType, hexaDF)
decisionVars <<- cbind(index,"decision", "d", neigType, hexaDF)
dummyVars <<- cbind(index, "dummy", "u", neigType, hexaDF)
########################### CALCULATE MTAP ###########################
# Create a new MIPModel()
MTAPModel <- MIPModel()
# Flow variables
MTAPModel <- add_variable(MTAPModel, f[i], i = 1:totNV, type = "integer", lb=0)
# Decision variables
MTAPModel <- add_variable(MTAPModel, d[i], i = 1:totNV, type = "binary")
# Dummy variables
MTAPModel <- add_variable(MTAPModel, u[i], i = 1:totNV, type = "binary")
# minimize travel distance
MTAPModel <- set_objective(MTAPModel, sum_expr(d[i] * impedances[i, 8]  , i = 1:totNV), "min")
####################################################
# Subject TO:
####################################################
# Start point constraints:  all Flow out = # of target points
for (i in 1:numOfStartPts) {
# FROM and TO Start point Indexes
FROMstartPoint <- flowVars[which(flowVars$x == startPoint$x[i] & flowVars$y == startPoint$y[i]), "index" ]
# TOstartPoint <- flowVars[which(flowVars$nX == startPoint$x[i] & flowVars$nY == startPoint$y[i]), "index" ]
MTAPModel <- add_constraint(MTAPModel, sum_expr(f[i], i = FROMstartPoint) == numOfTargetPts)
}
####################################################
# Target point constraints: all Flow in = 1
####################################################
for(i in 1:numOfTargetPts){
# To Target Point Indexes
ToTargetPoint <- flowVars[which(flowVars$nX == targetPoints$x[i] & flowVars$nY == targetPoints$y[i]), "index" ]
MTAPModel <- add_constraint(MTAPModel, sum_expr(f[i], i = ToTargetPoint ) == 1)
}
####################################################
################## Intermediate Nodes ##############
####################################################
for(i in 1:numOfStartPts){
intNodes <- flowVars
# Remove To Start Point
intNodes <- intNodes[-which(flowVars$nX==startPoint$x[i] & flowVars$nY==startPoint$y[i]),]
nrow(intNodes)
}
for(i in 1:numOfTargetPts){
# Remove From Target Points
intNodes <- intNodes[-which(intNodes$x == targetPoints$x[i] & intNodes$y == targetPoints$y[i]),]
nrow(intNodes)
}
# Intermediate nodes constraints (excluding start and target points), all Flow in == all Flow out
IntNodesCondition <- ""
for(s in 1:numOfStartPts){
IntNodesCondition <- paste(IntNodesCondition, "(r != startPoint$x[",s,"] | c != startPoint$y[",s,"]) &")
}
for(t in 1:numOfTargetPts){
if( t == numOfTargetPts){
IntNodesCondition <- paste(IntNodesCondition, "(r != targetPoints$x[",t,"] | c != targetPoints$y[",t,"])")
}
else{
IntNodesCondition <- paste(IntNodesCondition, "(r != targetPoints$x[",t,"] | c != targetPoints$y[",t,"]) &")
}
}
for(row in 1:nrow(intNodes)){
r <- intNodes$x[row]
c <- intNodes$y[row]
if(eval(parse(text=IntNodesCondition))){
fin <- c(intNodes[(which(intNodes$x==r & intNodes$y == c)), "index"])
fout <- c(intNodes[(which(intNodes$nX==r & intNodes$nY == c)), "index"])
MTAPModel <- add_constraint(MTAPModel, sum_expr(f[a], a = fin ) == sum_expr(f[b], b = fout ))
}
}
####################################################
# Dummy constraints.
####################################################
MTAPModel <- add_constraint(MTAPModel, f[k] == d[k] + u[k], k = 1:totNV)
MTAPModel <- add_constraint(MTAPModel, d[k] >= u[k], k = 1:totNV)
# Solve an instance and calculate solution time
start_time <- Sys.time()
# Solution with GLPK solver
result <- solve_model(MTAPModel, with_ROI(solver = "glpk"))
return(result)
}
## End of hexagon
else{
minMaxsize <- function(){
minRow <- 1
minCol <- 1
maxRow <- n
maxCol <- n
return(data.frame(minRow, minCol,maxRow,maxCol))
}
# Create all possible locations
createPossibleLocations <- function(){
surfMinMax <- minMaxsize()
xyCmb <- gtools::permutations(n, 2, surfMinMax$minRow:surfMinMax$maxRow, repeats.allowed=TRUE)
allPoints <<- data.frame(idx = 1:nrow(xyCmb), x = xyCmb[,1], y = xyCmb[,2], grp="Intermediate")
# Group Start, Target and Int nodes for plotting
for(i in 1:numOfStartPts){
allPoints[which(allPoints$x == startPoint$x[i] & allPoints$y == startPoint$y[i]), "grp"] <<- "Start"
}
for(i in 1:numOfTargetPts){
allPoints[which(allPoints$x == targetPoints$x[i] & allPoints$y == targetPoints$y[i]), "grp"] <<- "Target"
}
return(allPoints)
}
dist_fun <- function(i, j) {
vapply(seq_along(i), function(k) impedance[i[k], j[k]], numeric(1L))
}
# (Queen or Rook negihbors)
neighborsWType <- function(nStyle, varLetter, varType, i, j){
minmax <- minMaxsize()
minRow <- minmax$minRow
minCol <- minmax$minCol
maxRow <- minmax$maxRow
maxCol <- minmax$maxCol
if((i>=minRow) & (i<=maxRow) & (j>=minCol) & (j<=maxCol)){
neigs <- data.frame()
locAndneigs <- data.frame()
for (a in  as.numeric(i-1):as.numeric(i+1)){
for (b in as.numeric(j-1):as.numeric(j+1)){
if((b >= minRow) & (b <= maxRow) & (a >= minRow) & (a <= maxRow) & ((a != i) || (b != j))){
if(tolower(nStyle) == 'rook'){
if( !(a %in% c(as.numeric(i-1), as.numeric(i+1) ) )  || !(b %in% c(as.numeric(j-1), as.numeric(j+1)))){
# print(data.frame(a,b))
locAndneigs <- rbind(locAndneigs, list(varLetter, i, j, a, b))
neigs <- rbind(neigs, list(a,b))
}
}
else if(tolower(nStyle) =='queen'){
#print(data.frame(a,b))
locAndneigs <- rbind(locAndneigs, list(varLetter, i, j, a, b))
neigs <- rbind(neigs, list(a,b))
}
}
}
}
names(locAndneigs)[1] <- varType
names(locAndneigs)[2] <- "x"
names(locAndneigs)[3] <- "y"
names(locAndneigs)[4] <- "nX"
names(locAndneigs)[5] <- "nY"
return(locAndneigs)
}else{
print("cannot be lower than min and greater than max")
}
}
# Create neighbors
recordAllneighbors <- function(varType, varLetter, nStyle){
minmax <- minMaxsize()
minRow <- minmax$minRow
minCol <- minmax$minCol
maxRow <- minmax$maxRow
maxCol <- minmax$maxCol
allCombined <- data.frame()
for (a in  minRow:maxRow){
for (b in minCol:maxCol){
allCombined <- rbind(allCombined, neighborsWType(nStyle, varLetter, varType, a, b))
}
}
return(allCombined)
}
# Create DF for flow, decision, dummy and Impedances
createVariables <- function(neigType){
impedances <<- recordAllneighbors("impedance", "I", neigType)
# Total number of variables
totNV <<- nrow(impedances)
index <<- 1:totNV
# Create random impedance between 1-20
impValues <<- sample(1:upperLimit, totNV, replace = T)
impedances <<- cbind(index, impedances, impValues, impValues)
flowVars <<- recordAllneighbors("flow", "f", neigType)
flowVars <<- cbind(index, flowVars)
decisionVars <<- recordAllneighbors("decision", "d", neigType)
decisionVars <<- cbind(index, decisionVars)
dummyVars <<- recordAllneighbors("dummy", "u", neigType)
dummyVars <<- cbind(index, dummyVars)
}
allPoints <- createPossibleLocations()
createVariables(neigType)
########################### CALCULATE MTAP ###########################
minmax <- minMaxsize()
minRow <- minmax$minRow
minCol <- minmax$minCol
maxRow <- minmax$maxRow
maxCol <- minmax$maxCol
# Create a new MIPModel()
MTAPModel <- MIPModel()
# Flow variables
MTAPModel <- add_variable(MTAPModel, f[i], i = 1:totNV, type = "integer", lb=0)
# Decision variables
MTAPModel <- add_variable(MTAPModel, d[i], i = 1:totNV, type = "binary")
# Dummy variables
MTAPModel <- add_variable(MTAPModel, u[i], i = 1:totNV, type = "binary")
# minimize travel distance
MTAPModel <- set_objective(MTAPModel, sum_expr(d[i] * impedances[i, 8]  , i = 1:totNV), "min")
####################################################
# Subject TO:
####################################################
# Start point constraints:  all Flow out = # of target points
for (i in 1:numOfStartPts) {
# FROM and TO Start point Indexes
FROMstartPoint <- flowVars[which(flowVars$x == startPoint$x[i] & flowVars$y == startPoint$y[i]), "index" ]
# TOstartPoint <- flowVars[which(flowVars$nX == startPoint$x[i] & flowVars$nY == startPoint$y[i]), "index" ]
MTAPModel <- add_constraint(MTAPModel, sum_expr(f[i], i = FROMstartPoint) == numOfTargetPts)
}
####################################################
# Target point constraints: all Flow in = 1
####################################################
for(i in 1:numOfTargetPts){
# To Target Point Indexes
ToTargetPoint <- flowVars[which(flowVars$nX == targetPoints$x[i] & flowVars$nY == targetPoints$y[i]), "index" ]
MTAPModel <- add_constraint(MTAPModel, sum_expr(f[i], i = ToTargetPoint ) == 1)
}
####################################################
################## Intermediate Nodes ##############
####################################################
for(i in 1:numOfStartPts){
intNodes <- flowVars
# Remove To Start Point
intNodes <- intNodes[-which(flowVars$nX==startPoint$x[i] & flowVars$nY==startPoint$y[i]),]
nrow(intNodes)
}
for(i in 1:numOfTargetPts){
# Remove From Target Points
intNodes <- intNodes[-which(intNodes$x == targetPoints$x[i] & intNodes$y == targetPoints$y[i]),]
nrow(intNodes)
}
# Intermediate nodes constraints (excluding start and target points), all Flow in == all Flow out
IntNodesCondition <- ""
for(s in 1:numOfStartPts){
IntNodesCondition <- paste(IntNodesCondition, "(r != startPoint$x[",s,"] | c != startPoint$y[",s,"]) &")
}
for(t in 1:numOfTargetPts){
if( t == numOfTargetPts){
IntNodesCondition <- paste(IntNodesCondition, "(r != targetPoints$x[",t,"] | c != targetPoints$y[",t,"])")
}
else{
IntNodesCondition <- paste(IntNodesCondition, "(r != targetPoints$x[",t,"] | c != targetPoints$y[",t,"]) &")
}
}
for(r in minRow:maxRow){
for(c in minCol:maxCol){
if(eval(parse(text=IntNodesCondition))){
# print(c(r, c))
fin <- c(intNodes[(which(intNodes$x==r & intNodes$y == c)), "index"])
fout <- c(intNodes[(which(intNodes$nX==r & intNodes$nY == c)), "index"])
MTAPModel <- add_constraint(MTAPModel, sum_expr(f[a], a = fin ) == sum_expr(f[b], b = fout ))
}
}
}
####################################################
# Dummy constraints.
####################################################
MTAPModel <- add_constraint(MTAPModel, f[k] == d[k] + u[k], k = 1:totNV)
MTAPModel <- add_constraint(MTAPModel, d[k] >= u[k], k = 1:totNV)
# Solution with GLPK solver
result <- solve_model(MTAPModel, with_ROI(solver = "glpk"))
print(MTAPModel)
return(result)
}
}
plotMTAPResults<- function(myModel, neigType){
solution <- get_solution(myModel, d[i]) %>%
filter(value > 0)
d <- data.frame(impedances[solution$i,])
##################
# Plot the solution
if(tolower(neigType)=='hexagon'){
xOffset <- 0
yOffset <- 0.07
}else{
xOffset <- 0.1
yOffset <- 0.1
}
ggplot() +
# if in aes(), size goes in the legend.
geom_point(data=allPoints, aes(x, y, color=grp),size = 4) +
# use minor_breaks for background grid lines.
scale_y_continuous(minor_breaks = integer_breaks) +
scale_x_continuous(minor_breaks = integer_breaks) +
scale_color_manual(values=c("green", "red", "gray"), breaks = c("Start", "Target", "Intermediate")) +
geom_segment(data=d, mapping = aes(x=x, y=y, xend=nX, yend=nY), arrow=arrow(length=unit(0.21,"cm"), ends="last", type = "closed"), col='blue', size=0.1)+
geom_text(data=d, mapping = aes(x=nX+xOffset, y=nY+yOffset,label=impValues) )+
labs( title = paste0("Optimal Cost : ", myModel$objective_value), subtitle = paste0("Computation Time : ",compTime, " secs"))+
# To remove background grid lines
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
}
# Set Start and Target points
# startPoint <- data.frame(x = -0.37912188, y = -0.79464659)
#
# targetPoints <- data.frame(x = -0.25412188, y = -0.57814024)
# targetPoints <- rbind(targetPoints, c(x = 0.24587812, y = -0.57814024 ))
# targetPoints <- rbind(targetPoints, c(x = -0.62912188, y = -0.36163389 ))
# Set Start and Target points
startPoint <- data.frame(x = 6, y = 5)
targetPoints <- data.frame(x = 2, y = 4)
targetPoints <- rbind(targetPoints, c(x = 7, y = 7 ))
targetPoints <- rbind(targetPoints, c(x = 8, y = 1 ))
set.seed(12345)
start_time <- Sys.time()
myQueenModel <- solveMTAPInstance(9, "queen", 20)
end_time <- Sys.time()
compTime <- round(difftime(end_time, start_time, units="secs"), 4)
plotMTAPResults(myQueenModel, "queen")
# Solve an instance and calculate solution time
set.seed(12345)
start_time <- Sys.time()
myHexModel <- solveMTAPInstance(6, "hexagon", 20)
end_time <- Sys.time()
compTime <- round(difftime(end_time, start_time, units="secs"), 4)
plotMTAPResults(myHexModel, "hexagon")
devtools::document()
devtools::document()
devtools::install()
library(MTAP)
library(MTAP)
# Set Start and Target points
startPoint <- data.frame(x = 6, y = 5)
targetPoints <- data.frame(x = 2, y = 4)
targetPoints <- rbind(targetPoints, c(x = 7, y = 7 ))
targetPoints <- rbind(targetPoints, c(x = 8, y = 1 ))
set.seed(12345)
start_time <- Sys.time()
myQueenModel <- solveMTAPInstance(9, "queen", 20)
end_time <- Sys.time()
compTime <- round(difftime(end_time, start_time, units="secs"), 4)
plotMTAPResults(myQueenModel, "queen")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
git init
library(devtools)
devtools::install_github(efkopru/MTAP)
